# Podman basics
```
podman -v
podman pull registry.redhat.io/rhel7/rhel:7.9
podman login registry.redhat.io
podman pull registry.redhat.io/rhel7/rhel:7.9
podman images
podman run registry.redhat.io/rhel7/rhel:7.9 echo 'Red Hat'
podman ps
podman run registry.redhat.io/rhel7/rhel echo "anurag"
podman ps --all
podman run --rm registry.redhat.io/rhel7/rhel:7.9 echo "a"
podman images
podman run --name podman_rhel7 registry.redhat.io/rhel7/rhel:7.9 echo 'Red Hat'
podman ps --all
podman ps --all --format-json
podman ps --all --format=json
podman run -p 8080:8080 podman run --name podman_rhel7 \
podman run -p 8080:8080 registry.access.redhat.com/ubi8/httpd-24:latest
podman run -p 8080:8080 registry.access.redhat.com/ubi8/httpd-24:latest 
podman run -d -p 8080:8080 registry.access.redhat.com/ubi8/httpd-24:latest
podman ps --all
podman run -e NAME="Anurag" registry.redhat.io/rhel7/rhel:7.9 printenv NAME


podman pull registry.ocp4.example.com:8443/ubi8/ubi-minimal:8.5
podman run -e GREET=Hello -e NAME='Red Hat' registry.ocp4.example.com:8443/ubi8/ubi-minimal:8.5 printenv GREET NAME
podman run -p 8080:8080 registry.ocp4.example.com:8443/ubi8/httpd-24
podman run -d -p 8080:8080 registry.ocp4.example.com:8443/ubi8/httpd-24
```

# Networking
```
podman network create
Creates a new Podman network. This command accepts various options to configure properties of the network, including gateway address, subnet mask, and whether to use IPv4 or IPv6.

podman network ls
Lists existing networks and a brief summary of each. Options for this command include various filters and an output format to list other values for each network.

podman network inspect
Outputs a detailed JSON object containing configuration data for the network.

podman network rm
Removes a network.

podman network prune
Removes any networks that are not currently in use by any running containers.

podman network connect
Connects an already running container to or from an existing network. Alternatively, connect containers to a Podman network on container creation by using the --net option. The disconnect command disconnects a container from a network.

podman run -d --name my-container     --net example-net quay.io/rdacosta/my_httpd:latest
podman run -d --name double-connector --net postgres-net,redis-net quay.io/rdacosta/my_httpd:latest

Enabling Domain Name Resolution
When using the default network, the domain name system (DNS) is disabled and can only be enabled by overwriting the default network, which is not covered in this course. To use DNS, create a new Podman network and connect your containers to that network.

When using a network with DNS enabled, a containerâ€™s hostname is the name assigned to the container. For example, if a container is started with the following command, then the other containers on the test-net network can make requests to it using the hostname basic-container. This means that the name basic-container resolves to the current IP address of the basic-container container.

[user@host ~]$ podman run --net test-net --name basic-container example-image

[user@host ~]$ podman run -p 8075:80 my-app
Without a host specified, the container is assigned the broadcast address (0.0.0.0). This means that the container is accessible from all networks on the host machine.

To publish a container to a specific host and to limit the networks it is accessible from, use the following form.

[user@host ~]$ podman run -p 127.0.0.1:8075:80 my-app

podman port my-app
podman port --all
[user@host ~]$ podman inspect my-app \
 -f '{{.NetworkSettings.Networks.apps.IPAddress}}'
```

podman run --name cities-app91 \
--network cities -p 8091:8090 -d \
registry.ocp4.example.com:8443/redhattraining/podman-info-cities:v0.1

open an interactive shell in a running container, combine the --interactive and --tty options:
podman exec -til /bin/bash

podman exec nginx ls /usr/share/nginx/html
podman cp nginx:/etc/nginx/nginx.conf nginx.conf
podman exec nginx nginx -s reload

podman ps --all
podman stop --all
podman stop --time=100
podman kill httpd
podman pause 4f2038c05b8c
podman unpause 4f2038c05b8c
podman rm --all
podman run --name httpd -d -p \
 8080:8080 registry.ocp4.example.com:8443/ubi8/httpd-24
 
Accessing Containers
 363  2023-04-17 13:15:10 podman run --name nginx -d -p 8080:8080   registry.ocp4.example.com:8443/redhattraining/podman-nginx-helloworld
  364  2023-04-17 13:15:54 podman cp niinx:/var/log/nginx/error.log error.log
  365  2023-04-17 13:16:03 podman cp nginx:/var/log/nginx/error.log error.log
  366  2023-04-17 13:16:08 ls -lart
  367  2023-04-17 13:16:21 gedit error.log
  368  2023-04-17 13:16:56 podman exec nginx ls /usr/share/nginc/html/public
  369  2023-04-17 13:17:19 podman exec nginx ls /usr/share/nginx/html
  370  2023-04-17 13:18:02 podman cp nginx:/etc/nginx/nginx.conf nginx.conf
  371  2023-04-17 13:18:09 gedit nginx.conf
  372  2023-04-17 13:18:20 podman cp nginx.conf nginx:/etc/nginx/nginx.conf
  373  2023-04-17 13:18:29 podman exec nginx nginx -s reload
  
  podman search nginx
  podman pull registry.redhat.io/rhel8/mariadb-103:1
  podman image prune -af
  podman rmi --all
  podman build -f Containerfile -t simple-server
  Remove all the unused images to recover storage space. Use the podman image prune command with the -a option to remove all unused images and the -f option to avoid confirmation.
  podman image prune -af
  
  
  # This is a comment line 1
FROM        registry.redhat.io/ubi8/ubi:8.6 2
LABEL       description="This is a custom httpd container image" 3
RUN         yum install -y httpd 4
EXPOSE      80 5
ENV         LogLevel "info" 6
ADD         http://someserver.com/filename.pdf /var/www/html 7
COPY        ./src/   /var/www/html/ 8
USER        apache 9
ENTRYPOINT  ["/usr/sbin/httpd"] 10
CMD         ["-D", "FOREGROUND"] 11

	
ENTRYPOINT specifies the default command to execute when the image runs in a container.
CMD provides the default arguments for the ENTRYPOINT instruction.
When a Containerfile specifies both ENTRYPOINT and CMD then CMD changes its behavior. In this case the values provided to CMD are passed as default arguments to the ENTRYPOINT.



FROM registry.ocp4.example.com:8443/ubi8/nodejs-16
LABEL org.opencontainers.image.authors="Your Name"
LABEL com.example.environment="production"
LABEL com.example.version="0.0.1"
ENV SERVER_PORT=3000
ENV NODE_ENV="production"
EXPOSE $SERVER_PORT
WORKDIR /opt/app-root/src
COPY . .
RUN npm install
CMD npm start

When you build the container image, use the --build-arg flag to set the value, such as podman build --build-arg key=example-value for the preceding example.


ARG VERSION="1.16.8" \
    BIN_DIR=/usr/local/bin/
ENV VERSION=${VERSION} \
    BIN_DIR=${BIN_DIR}
RUN curl "https://dl.example.io/${VERSION}/example-linux-amd64" \
        -o ${BIN_DIR}/example

ARG VERSION \
    BIN_DIR
ENV VERSION=${VERSION:-1.16.8} \
    BIN_DIR=${BIN_DIR:-/usr/local/bin/}
RUN curl "https://dl.example.io/${VERSION}/example-linux-amd64" \
        -o ${BIN_DIR}/example
        
FROM registry.redhat.io/rhel9/postgresql-13:1
VOLUME /var/lib/pgsql/data

podman inspect VOLUME_ID


# First stage
FROM registry.access.redhat.com/ubi8/nodejs-14:1 as builder 
COPY ./ /opt/app-root/src/
RUN npm install
RUN npm run build 

# Second stage
FROM registry.access.redhat.com/ubi8/nodejs-14-minimal:1 
COPY --from=builder /opt/app-root/src/ /opt/app-root/src/ 
EXPOSE 8080
CMD node dist/index.js

	
Copy the application files to the directory where NGINX serves content by default. The --from flag indicates that the files are copied from the builder stage.
podman build --squash-all -t localhost/squashed .


FROM registry.ocp4.example.com:8443/redhattraining/podman-random-numbers as generator
RUN python3 random_generator.py

FROM registry.ocp4.example.com:8443/ubi8/python-38:1-96
USER default
WORKDIR /redhat
COPY --from=generator --chown=default /app/numbers.txt materials/numbers.txt
COPY main.py .
ENV FILE="/redhat/materials/numbers.txt"
VOLUME /redhat/materials
CMD python3 main.py

cat /etc/subuid /etc/subgid
sudo usermod --add-subuids 100000-165535 \
  --add-subgids 100000-165535 student
podman run -it registry.access.redhat.com/ubi9/ubi bash
podman top e6116477c5c9 huser user



FROM registry.ocp4.example.com:8443/redhattraining/podman-certificate-generator as certs
RUN ./gen_certificates.sh
FROM registry.ocp4.example.com:8443/ubi8/ubi
RUN dnf module install -y nodejs:16 && \
    groupadd -r student && useradd -r -m -g student student
COPY --from=certs --chown=student:student /app/*.pem /etc/pki/tls/private/certs/
COPY --chown=student:student . /app/
ENV TLS_PORT=8443 \
    HTTP_PORT=8080 \
    CERTS_PATH="/etc/pki/tls/private/certs"
WORKDIR /app
RUN npm ci --omit=dev
USER student
ENTRYPOINT npm start


podman run -p 8080:8080 --volume  /www:/var/www/html:ro \
  registry.access.redhat.com/ubi8/httpd-24:latest
  
podman volume create http-data
podman volume inspect http-data
podman run -p 8080:8080 --volume  http-data:/var/www/html \
  registry.access.redhat.com/ubi8/httpd-24:latest
podman volume import http_data web_data.tar.gz
podman volume export http_data --output web_data.tar.gz

podman run -e POSTGRESQL_ADMIN_PASSWORD=redhat --network lab-net \
  --mount  type=tmpfs,tmpfs-size=512M,destination=/var/lib/pgsql/data \
  registry.redhat.io/rhel9/postgresql-13:1
  
  podman run --rm --name podman-server \
  --volume ~/www:/server:Z -p 8000:8000 \
  registry.ocp4.example.com:8443/redhattraining/podman-python-server ? WHY:Z
  
  
  

